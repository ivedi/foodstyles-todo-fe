{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport Apploading from 'expo-app-loading';\nimport useFonts from \"./hooks/useFonts\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport LoginScreen from \"./screens/LoginScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  var loadFonts = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(useFonts());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isReady) {\n    return _jsx(Apploading, {\n      startAsync: loadFonts,\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      onError: function onError(e) {\n        console.error(e);\n      }\n    });\n  }\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","Font","Apploading","useFonts","NavigationContainer","createNativeStackNavigator","LoginScreen","Stack","App","isReady","setIsReady","loadFonts","e","console","error","headerShown"],"sources":["/home/ivedi/goworkspace/src/github.com/ivedi/foodstyles-todo-fe/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport Apploading from 'expo-app-loading';\nimport useFonts from './hooks/useFonts';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport LoginScreen from './screens/LoginScreen';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [isReady, setIsReady] = useState(false);\n\n  const loadFonts = async () => {\n    await useFonts();\n  };\n\n  if (!isReady) {\n    return (\n      <Apploading\n        startAsync={loadFonts}\n        onFinish={() => setIsReady(true)}\n        onError={e => { console.error(e); }}\n      />\n    );\n  }\n\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{\n        headerShown: false\n      }}>\n        <Stack.Screen\n          name=\"Login\"\n          component={LoginScreen}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,QAAP;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AAEA,OAAOC,WAAP;;AAEA,IAAMC,KAAK,GAAGF,0BAA0B,EAAxC;AAEA,eAAe,SAASG,GAAT,GAAe;EAC5B,gBAA8BR,QAAQ,CAAC,KAAD,CAAtC;EAAA;EAAA,IAAOS,OAAP;EAAA,IAAgBC,UAAhB;;EAEA,IAAMC,SAAS,GAAG;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACVR,QAAQ,EADE;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAlB;;EAIA,IAAI,CAACM,OAAL,EAAc;IACZ,OACE,KAAC,UAAD;MACE,UAAU,EAAEE,SADd;MAEE,QAAQ,EAAE;QAAA,OAAMD,UAAU,CAAC,IAAD,CAAhB;MAAA,CAFZ;MAGE,OAAO,EAAE,iBAAAE,CAAC,EAAI;QAAEC,OAAO,CAACC,KAAR,CAAcF,CAAd;MAAmB;IAHrC,EADF;EAOD;;EAGD,OACE,KAAC,mBAAD;IAAA,UACE,KAAC,KAAD,CAAO,SAAP;MAAiB,aAAa,EAAE;QAC9BG,WAAW,EAAE;MADiB,CAAhC;MAAA,UAGE,KAAC,KAAD,CAAO,MAAP;QACE,IAAI,EAAC,OADP;QAEE,SAAS,EAAET;MAFb;IAHF;EADF,EADF;AAYD"},"metadata":{},"sourceType":"module"}